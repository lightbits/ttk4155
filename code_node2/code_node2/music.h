#ifndef MUSIC_H
#define MUSIC_H
#ifndef MUSIC_CLOCK_DIVISOR
#define MUSIC_CLOCK_DIVISOR 8
#endif
#include "common.h"

void wave_frequency(uint32_t frequency);
// This enables PWM on PE3/OC3A with output toggling on compare-match.
// This means that the output is a square wave which is low for one TOP
// period and high the next TOP period. In other words, the length of a
// cycle is 2*TOP, and the output wave frequency is
//   f = (F_CPU/N) / (2*TOP)
//
// The clock divisor, N, must be chosen such that for the frequencies
// you want to play, the value of TOP fits inside a 16-bit register.
// (Set this value by #defining MUSIC_CLOCK_DIVISOR)
//
// Note also that the frequencies are quantized by rounding TOP to the
// nearest 16-bit integer.

#define MARIO_MULTIPLIER_FREQUENCY 2
#define MARIO_MULTIPLIER_LENGTH (2.0f/3.0f)
const uint16_t music_frequency[] = {
	330,
	330,
	330,
	262,
	330,
	392,
	196,
	262,
	196,
	164,
	220,
	246,
	233,
	220,
	196,
	330,
	392,
	440,
	349,
	392,
	330,
	262,
	294,
	247,
	262,
	196,
	164,
	220,
	246,
	233,
	220,
	196,
	330,
	392,
	440,
	349,
	392,
	330,
	262,
	294,
	247,
	392,
	370,
	349,
	311,
	330,
	207,
	220,
	262,
	220,
	262,
	294,
	392,
	370,
	349,
	311,
	330,
	523,
	523,
	523,
	392,
	370,
	349,
	311,
	330,
	207,
	220,
	262,
	220,
	262,
	294,
	311,
	296,
	262,
	262,
	262,
	262,
	262,
	294,
	330,
	262,
	220,
	196,
	262,
	262,
	262,
	262,
	294,
	330,
	440,
	392,
	262,
	262,
	262,
	262,
	294,
	330,
	262,
	220,
	196,
	330,
	330,
	330,
	262,
	330,
	392,
	196,
	196,
	262,
	330,
	392,
	523,
	660,
	784,
	660,
	207,
	262,
	311,
	415,
	523,
	622,
	830,
	622,
	233,
	294,
	349,
	466,
	587,
	698,
	932,
	932,
	932,
	932,
	1046
};

const uint16_t music_length[] = {
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	300,
	300,
	300,
	300,
	100,
	200,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	300,
	300,
	300,
	300,
	100,
	200,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	300,
	300,
	300,
	100,
	100,
	100,
	100,
	100,
	200,
	200,
	200,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	200,
	200,
	200,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	100,
	60
};

const uint16_t music_delay[] = {
	100,
	300,
	300,
	100,
	300,
	700,
	700,
	300,
	300,
	300,
	100,
	300,
	0,
	300,
	150,
	150,
	150,
	300,
	100,
	300,
	300,
	100,
	100,
	500,
	300,
	300,
	300,
	100,
	300,
	0,
	300,
	150,
	150,
	150,
	300,
	100,
	300,
	300,
	100,
	100,
	900,
	100,
	100,
	100,
	300,
	300,
	100,
	100,
	300,
	100,
	100,
	500,
	100,
	100,
	100,
	300,
	300,
	300,
	100,
	1100,
	100,
	100,
	100,
	300,
	300,
	100,
	100,
	300,
	100,
	100,
	500,
	300,
	300,
	1300,
	100,
	300,
	300,
	100,
	300,
	50,
	50,
	50,
	700,
	100,
	300,
	300,
	100,
	100,
	700,
	300,
	500,
	100,
	300,
	300,
	100,
	300,
	50,
	50,
	50,
	700,
	100,
	300,
	300,
	100,
	300,
	700,
	700,
	130,
	130,
	130,
	130,
	130,
	130,
	580,
	580,
	130,
	130,
	130,
	130,
	130,
	130,
	580,
	580,
	130,
	130,
	130,
	130,
	130,
	130,
	580,
	130,
	130,
	130,
	5000,
};

#define LOST_MULTIPLIER_FREQUENCY 1
#define LOST_MULTIPLIER_LENGTH 2
const uint16_t music_lost_frequency[] = {
	1046,
	784,
	659,
	880,
	988,
	880,
	831,
	932,
	831,
	784,
	740,
	784
};

const uint16_t music_lost_length[] = {
	100, 100, 100, 50, 50, 50, 50, 50, 50, 50, 50, 200
};

const uint16_t music_lost_delay[] = {
	50, 50, 50, 50, 50, 50, 50, 50, 50, 20, 20, 1000
};
#endif
