struct mcp_status
{
    bool message_in_rx0;
    bool message_in_rx1;
    bool tx0_pending;
    bool tx1_pending;
    bool tx2_pending;
    bool tx0_sent;
    bool tx1_sent;
    bool tx2_sent;
};

struct mcp_tx_status
{
    bool aborted;
    bool lost;
    bool error;
    bool pending;
};

void mcp_request_to_send0() { mcp_request_to_send(MCP_RTS0); }
void mcp_request_to_send1() { mcp_request_to_send(MCP_RTS1); }
void mcp_request_to_send2() { mcp_request_to_send(MCP_RTS2); }
void mcp_mode_config()   { mcp_modify_bit(CANCTRL, REQOP, REQOP_CONFIG); }
void mcp_mode_loopback() { mcp_modify_bit(CANCTRL, REQOP, REQOP_LOOPBACK); }
void mcp_mode_normal()   { mcp_modify_bit(CANCTRL, REQOP, REQOP_NORMAL); }

mcp_status mcp_get_status()
{
    spi_begin();
    spi_write(0b10100000);
    uint8_t data = spi_read();
    spi_end();

    // See page 69, figure 12-8 for a description of the return data
    mcp_status status;
    status.message_in_rx0 = data & 0b00000001;
    status.message_in_rx1 = data & 0b00000010;
    status.tx0_pending    = data & 0b00000100;
    status.tx0_sent       = data & 0b00100000;
    status.tx1_pending    = data & 0b00001000;
    status.tx1_sent       = data & 0b01000000;
    status.tx2_pending    = data & 0b00010000;
    status.tx2_sent       = data & 0b10000000;
    return status;
}

mcp_tx_status mcp_get_tx_status(uint8_t which)
{
    uint8_t data;
    if (which == 0) data = mcp_read(TXB0CTRL);
    if (which == 1) data = mcp_read(TXB1CTRL);
    if (which == 2) data = mcp_read(TXB2CTRL);

    #define TRANSMIT_ABORTED 0b01000000
    #define TRANSMIT_LOST    0b00100000
    #define TRANSMIT_ERROR   0b00010000
    #define TRANSMIT_PENDING 0b00001000

    mcp_tx_status status;
    status.aborted = data & TRANSMIT_ABORTED;
    status.lost    = data & TRANSMIT_LOST;
    status.error   = data & TRANSMIT_ERROR;
    status.pending = data & TRANSMIT_PENDING;
    return status;
}
