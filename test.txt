void test_mcp()
{
    uart_init(9600);
    spi_init();
    mcp_reset();

    // Configure the MCP
    mcp_set_mode_configuration();
    {
        // todo: Set BIT TIMING (this is important when
        // talking with other CAN devices. But not important
        // when in loopback mode probably!!!!!)

        // Disable hardware pins as request to send indicators,
        // we will instead use the SPI interface. Note, this
        // register is only available in configuration mode.
        mcp_modify_bit(TXRTSCTRL, 0b00000111, 0);

        // Disable all interrupts
        mcp_write(CANINTE, 0b00000000);
        // mcp_write(CANINTE, 0b00000011); // or enable RX0 and RX1 interrupts

        // Clear any pending interrupts (unsure if needed)
        mcp_write(CANINTF, 0b00000000);

        // Disable CLKOUT
        mcp_modify_bit(CANCTRL, CLKEN, 0);

        // Disable all filters and masks
        mcp_modify_bit(RXB0CTRL, RXM, 0b00000000);
        mcp_modify_bit(RXB1CTRL, RXM, 0b00000000);

        // Disable rollover
        mcp_modify_bit(RXB0CTRL, BUKT, 0b00000000);

        // Disable RX0BF and RX1BF pins as message indicators
        mcp_write(BFPCTRL, 0b00000000);
    }

    mcp_set_mode_loopback();

    // send a message
    {
        uint16_t id = 42;
        const char *data = "hello!";
        uint8_t length = 6;

        // Write the ID
        uint8_t id_high = (uint8_t)(id >> 3);
        uint8_t id_low = (uint8_t)((id & 0b111) << 5);
        mcp_write(TXB0SIDH, id_high);
        mcp_write(TXB0SIDL, id_low);

        // Write length of message (0 to 8 bytes)
        // Note: this also sets RTR to 0 (indicating a data frame)
        mcp_write(TXB0DLC, length & 0b1111);

        // Write the data bytes
        mcp_write_many(TXB0D0, (uint8_t*)data, length);

        // Flag the message buffer as being ready for transmission
        mcp_request_to_send(MCP_RTS0);

        _delay_ms(100);

        mcp_tx_status status = mcp_get_tx_status();
        printf("sent a message!\n");
        printf("aborted: %d\n", status.aborted);
        printf("lost: %d\n", status.lost);
        printf("error: %d\n", status.error);
        printf("pending: %d\n", status.pending);
    }

    // read a message
    {
        uint8_t data[13+1] = {0};
        while (1)
        {
            // uint8_t status = mcp_read(CANINTF);
            // if (status & RX0IF)
            //     received_in_buffer = RXB0SIDH;
            // if (status & RX1IF)
            //     received_in_buffer = RXB1SIDH;

            mcp_status s = mcp_get_status();
            if (s.message_in_rx0)
            {
                mcp_read_many(RXB0SIDH, data, 13);
                mcp_modify_bit(CANINTF, RX0IF, 0);
                break;
            }
            if (s.message_in_rx1)
            {
                mcp_read_many(RXB1SIDH, data, 13);
                mcp_modify_bit(CANINTF, RX1IF, 0);
                break;
            }
        }

        uint16_t id_high = data[0];
        uint16_t id_low = (data[1] >> 5);
        uint16_t id = (id_high << 3) | (id_low);
        uint8_t eid_high = data[2];
        uint8_t eid_low = data[3];
        uint8_t length = data[4] & 0b00001111;
        uint8_t *data = &data[5];
        data[13] = 0; // null-terminate data so we can print it as a string

        printf("got a message!\n");
        printf("id: %d\n", id);
        printf("length: %d\n", length);
        printf("data: %s\n", data);
    }
}
